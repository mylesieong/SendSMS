package com.bcm.app.sendsms;

/**
 * 
 *
 */
public class App{
    public static void main( String[] args ){
        System.out.println( "Main Program starts." );
        
        /* Initialization of resources */
        Property propertySMSInfo = readProperty("SMS_INFO");
        final String fFTPAddress = propertySMSInfo.getProperty("ftp_dest");
        final String fFTPFolder = propertySMSInfo.getProperty("ftp_dir");
        final String fUserID = propertySMSInfo.getProperty("Username");
        final String fUserPassword = propertySMSInfo.getProperty("Password");
        final String fSMSFile = propertySMSInfo.getProperty("smsfolder") + "\\" + propertySMSInfo.getProperty("msgtxt");
        final String fBackUpFolder = propertySMSInfo.getProperty("bkupfolder");
        final String fSMSFolder = propertySMSInfo.getProperty("smsfolder");
        
        Table tableSendFile = readTable("SEND_FILE");
        Table tableFTPLog = readTable("FTP_LOG");
        String workingPath = System.getProperty("user.dir");
        
        int handle = 0;
        String logMessage = "";
        String inMessage = "inmsg.txt";
        String outMessage = "outmsg.txt";
        
        /* Main procedure */
        boolean foundMessage = retreiveAllSMSFiles();
        convertMessage();
        if (foundMessage) {
            FTPSMSFile();
            BackupFile();
        }
        closeAllFiles();
        System.out.println( "Main Program ends." );
    }
    
    public static boolean retreiveAllSMSFiles(){
        System.out.println("Method invoke: retreiveAllSMSFiles()");
        File foundDirectory = new File(fSMSFolder);
        if (foundDirectory.exists() && foundDirectory.isDir()){
            int counter = 0;
            int i = 0;
            /* If found files in the directory, send it and write log
             * on how many files found.
             */
            return true/false;
        }else{
            /* Write log to state no message found. */
            return false;
        }
    }
    
    public static void convertMessage(){
        System.out.println("Method invoke: convertMessage()");
        int j = 0;
        String convertCommand = "CONVERT.EXE";
        for (Row row = tableSendFile.getFirstRow(); row.next(); row.isEmpty()){
            File.delete(workingPath + "\\" + inMessage);
            File.delete(workingPath + "\\" + outMessage);
            File sourceFile = new File(fSMSFolder + "\\" + row.getString("send_file"));
            sourceFile.copyTo(workingPath + "\\" + inMessage);
            File copiedFile = new File(workingPath + "\\" + inMessage);
            if (copiedFile.exists()){
                boolean isCommandSuccess = System.cmd(convertCommand);
                if (isCommandSuccessm) {
                    sourceFile.delete();
                    copiedFile.copyTo(fSMSFolder + "\\" + row.getString("send_file"));
                }
            }
        }
    }
    
    public static void FTPSMSFile(){
        System.out.println("Method invoke: FTPSMSFile()");
        InternetConnection internetConnection = System.getInternetConnection();
        try {
            FTPConnection ftpConnection = internetConnection.connectFTP(fFTPAddress, fUserID, fUserPassword);
            File ftpRoot = ftpConnection.getRoot();
            if (ftpRroot.hasFile(fFTPFolder)){
                File ftpFolder = ftpRoot.getFile(fFTPFolder);
            }else{
                /* Write some log*/
            }
            if (ftpConnection.isReady()){
                for (Row row = tableSendFile.getFirstRow(); row.next(); row.isEmpty()){
                    File toBeUploadFile = new File(fSMSFolder + "\\" + row.getString("send_file"));
                    boolean isUploaded = ftpConnection.put(toBeUploadFile, row.getString("send_file"));
                    /* write some log and update the send flag in the tableSendFile */
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally{
            internetConnection.close();
        }
    }
    
    public static void BackupFile(){
        System.out.println("Method invoke: BackupFile()");
        Date today = System.getToday();
        File backUpFolder = new File(fBackUpFolder);
        if (!backUpFolder.exists() || !backUpFolder.isDir()){
            backUpFolder.createDir();
        }
                
        File backUpSubFolder = backUpFolder.getFile(today.toString());
        if (!backUpSubFolder.exists() || !backUpSubFolder.isDir()){
            backUpSubFolder.createDir();
        }
                
        for (Row row = tableSendFile.getFirstRow(); row.next(); row.isEmpty()){
            /* Whatever back the file up which its sent flag is Y but is 
             * not copied to back up folder (sub folder named by date) yet
             */
        }

    }
    
    public static void closeAllFiles(){
        System.out.println("Method invoke: closeAllFiles()");
    }
}
